{"version":3,"sources":["localdb.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","arrayEachTrue","array","objectId","timestamp","Date","getTime","toString","replace","Math","random","toLowerCase","defaultOpts","limit","sortBy","sort","skip","definition","W","LS","LocalDB","name","type","arguments","undefined","this","db","opts","populate_keys","value","where","collection","JSON","parse","getItem","query","find","_this","console","error","get","filter","obj","has","push","a","b","slice","populate","forEach","ref","__className","temp","findOne","_id","Array","isArray","c","index","initObj","override","createdAt","updatedAt","incOrDec","id","__type","_len","keys","_key","reinit","setItem","stringify","removeItem","context","module","exports","window","localStorage"],"mappings":"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","file":"localdb.min.js","sourcesContent":["/*\n * localdb\n * (c) 2015\n * github.com/egoist/localdb\n */\n\n'use strict';\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n(function () {\n\n  var defaultOpts = { limit: 0, sortBy: 'index', sort: 1, skip: 0 };\n\n  var definition = function definition(W, LS) {\n    var LocalDB = (function () {\n      function LocalDB(name) {\n        var type = arguments.length <= 1 || arguments[1] === undefined ? 'Array' : arguments[1];\n        var timestamp = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];\n\n        _classCallCheck(this, LocalDB);\n\n        if (typeof name === 'string') {\n          this.db = name;\n          this.type = type;\n          this.timestamp = timestamp;\n        } else if (typeof name === 'object') {\n          var opts = name;\n          this.db = opts.name;\n          this.type = opts.type || 'Array';\n          this.timestamp = opts.timestamp || false;\n        }\n        this.populate_keys = null;\n      }\n\n      _createClass(LocalDB, [{\n        key: 'get',\n        value: function get(where) {\n          // where maps to key or index, depending on the type if Object or Array\n          var collection = JSON.parse(LS.getItem(this.db));\n          if (!where && typeof where !== 'number') return collection;else if (typeof collection === 'undefined' || !collection) return null;else return collection[where];\n        }\n      }, {\n        key: 'findOne',\n        value: function findOne(query) {\n          return this.find(query, {\n            limit: 1\n          });\n        }\n      }, {\n        key: 'find',\n        value: function find(query) {\n          var _this = this;\n\n          var opts = arguments.length <= 1 || arguments[1] === undefined ? defaultOpts : arguments[1];\n\n          if (this.type !== 'Array') {\n            return console.error('The .findOne method only works if the database is an Array!');\n          }\n\n          opts.limit = opts.limit || defaultOpts.limit;\n          opts.sortBy = opts.sortBy || defaultOpts.sortBy;\n          opts.sort = opts.sort || defaultOpts.sort;\n          opts.skip = opts.skip || defaultOpts.skip;\n\n          var collection = this.get() || [];\n          if (query) {\n            collection = collection.filter(function (obj) {\n              var has = [];\n              for (var key in query) {\n                has.push(obj[key] === query[key]);\n              }\n              if (arrayEachTrue(has)) {\n                return true;\n              } else {\n                return false;\n              }\n            });\n          }\n          if (opts.limit === 1 && opts.skip === 0) {\n            collection = collection[0];\n          } else {\n\n            collection = collection.sort(function (a, b) {\n              if (a[opts.sortBy] < b[opts.sortBy]) {\n                return -opts.sort;\n              } else if (a[opts.sortBy] > b[opts.sortBy]) {\n                return opts.sort;\n              } else {\n                return 0;\n              }\n            });\n\n            if (opts.limit === 0) {\n              collection = collection.slice(opts.skip);\n            } else {\n              collection = collection.slice(opts.skip, opts.limit + opts.skip);\n            }\n          }\n\n          var populate = function populate(collection) {\n\n            if (_this.populate_keys && _this.populate_keys.length > 0) _this.populate_keys.forEach(function (key) {\n              var ref = collection[key];\n              if (ref) {\n                var db = new LocalDB(ref.__className, 'Array');\n                var temp = db.findOne({ '_id': ref.objectId });\n                collection[key] = temp;\n              }\n            });\n            return collection;\n          };\n\n          if (Array.isArray(collection)) {\n            collection.forEach(function (c) {\n              c = populate(c);\n            });\n          } else if (typeof collection === 'object') {\n            collection = populate(collection);\n          }\n\n          this.populate_keys = null;\n\n          return collection;\n        }\n      }, {\n        key: 'add',\n        value: function add(obj) {\n          if (this.type !== 'Array') {\n            console.error('The .add method only works if the database is an Array!');\n          }\n          var collection = this.get() || [];\n          var index = 0;\n          if (collection && collection.length > 0) {\n            index = collection.length;\n          }\n          obj = this.initObj(index, obj);\n          collection.push(obj);\n          this.override(collection);\n          return this;\n        }\n      }, {\n        key: 'initObj',\n        value: function initObj(index, obj) {\n          obj.index = index;\n          if (!obj._id) {\n            obj._id = objectId();\n          }\n          if (this.timestamp) {\n            if (!obj.createdAt) {\n              obj.createdAt = new Date();\n            }\n            obj.updatedAt = new Date();\n          }\n          return obj;\n        }\n      }, {\n        key: 'set',\n        value: function set(key, value) {\n          // works if db is object\n          if (this.type !== 'Object') {\n            console.error('The .set method only works if the database is an Object!');\n          } else {\n            var collection = this.get() || {};\n            collection[key] = value;\n            this.override(collection);\n          }\n          return this;\n        }\n      }, {\n        key: 'inc',\n        value: function inc(key) {\n          var value = arguments.length <= 1 || arguments[1] === undefined ? 1 : arguments[1];\n\n          return this.incOrDec('inc', key, value);\n        }\n      }, {\n        key: 'dec',\n        value: function dec(key) {\n          var value = arguments.length <= 1 || arguments[1] === undefined ? 1 : arguments[1];\n\n          return this.incOrDec('dec', key, value);\n        }\n      }, {\n        key: 'incOrDec',\n        value: function incOrDec(type, key) {\n          var value = arguments.length <= 2 || arguments[2] === undefined ? 1 : arguments[2];\n\n          if (this.type !== 'Object') {\n            console.error('The .set method only works if the database is an Object!');\n          } else {\n            var collection = this.get() || {};\n            if (type === 'inc') {\n              collection[key] = (collection[key] || 0) + value;\n            } else if (type === 'dec') {\n              collection[key] = (collection[key] || 0) - value;\n            }\n            this.override(collection);\n          }\n          return this;\n        }\n      }, {\n        key: 'save',\n        value: function save(obj) {\n          if (this.type !== 'Array') {\n            console.error('The .save method only works if the database is an Array!');\n          }\n          var collection = this.get();\n          if (collection[obj.index]._id === obj._id) {\n            collection[obj.index] = obj;\n            this.override(collection);\n          }\n          return this;\n        }\n      }, {\n        key: 'extend',\n        value: function extend(id) {\n          if (!id) {\n            return console.error('You should provide an objectId to reference');\n          }\n          return {\n            __type: 'Pointer',\n            __className: this.db,\n            objectId: id\n          };\n        }\n      }, {\n        key: 'populate',\n        value: function populate() {\n          for (var _len = arguments.length, keys = Array(_len), _key = 0; _key < _len; _key++) {\n            keys[_key] = arguments[_key];\n          }\n\n          this.populate_keys = keys;\n          return this;\n        }\n      }, {\n        key: 'override',\n        value: function override(collection) {\n          var reinit = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];\n\n          if (this.type === 'Array' && reinit) {\n            for (var i = 0; i < collection.length; i++) {\n              collection[i] = this.initObj(i, collection[i]);\n            }\n          }\n          LS.setItem(this.db, JSON.stringify(collection));\n          return this;\n        }\n      }, {\n        key: 'remove',\n        value: function remove(key, value) {\n          var collection = this.get();\n\n          if (this.type === 'Array') {\n            if (collection.length === 0) {\n              return this;\n            }\n            collection = collection.filter(function (obj) {\n              if (obj[key] === value) {\n                return false;\n              } else {\n                return true;\n              }\n            });\n            for (var i = 0; i < collection.length; i++) {\n              collection[i].index = i;\n            }\n          } else if (this.type === 'Object') {\n            delete collection[key];\n          }\n\n          LS.setItem(this.db, JSON.stringify(collection));\n          return this;\n        }\n      }, {\n        key: 'destroy',\n        value: function destroy() {\n          LS.removeItem(this.db);\n          return this;\n        }\n      }]);\n\n      return LocalDB;\n    })();\n\n    return LocalDB;\n  };\n\n  function arrayEachTrue(array) {\n    for (var i = 0; i < array.length; i++) {\n      if (!array[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function objectId() {\n    var timestamp = (new Date().getTime() / 1000 | 0).toString(16);\n    return timestamp + 'xxxxxxxxxxxxxxxx'.replace(/[x]/g, function () {\n      return (Math.random() * 16 | 0).toString(16);\n    }).toLowerCase();\n  }\n\n  ;(function (context, name, definition) {\n    if (typeof module !== 'undefined') {\n      module.exports = definition;\n    } else if (typeof context !== 'undefined') {\n      context[name] = definition;\n    }\n  })(window, 'localdb', definition(window, window.localStorage));\n})();"],"sourceRoot":"/source/"}